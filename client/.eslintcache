[{"D:\\Загрузки\\online-store-full-course-master\\client\\src\\index.js":"1","D:\\Загрузки\\online-store-full-course-master\\client\\src\\App.js":"2","D:\\Загрузки\\online-store-full-course-master\\client\\src\\store\\UserStore.js":"3","D:\\Загрузки\\online-store-full-course-master\\client\\src\\store\\DeviceStore.js":"4","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\AppRouter.js":"5","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\NavBar.js":"6","D:\\Загрузки\\online-store-full-course-master\\client\\src\\http\\userAPI.js":"7","D:\\Загрузки\\online-store-full-course-master\\client\\src\\routes.js":"8","D:\\Загрузки\\online-store-full-course-master\\client\\src\\http\\index.js":"9","D:\\Загрузки\\online-store-full-course-master\\client\\src\\utils\\consts.js":"10","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\DevicePage.js":"11","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Auth.js":"12","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Basket.js":"13","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Shop.js":"14","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Admin.js":"15","D:\\Загрузки\\online-store-full-course-master\\client\\src\\http\\deviceAPI.js":"16","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\Pages.js":"17","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\DeviceList.js":"18","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\BrandBar.js":"19","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\TypeBar.js":"20","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\modals\\CreateType.js":"21","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\modals\\CreateDevice.js":"22","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\modals\\CreateBrand.js":"23","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\DeviceItem.js":"24"},{"size":439,"mtime":1611985807000,"results":"25","hashOfConfig":"26"},{"size":860,"mtime":1611985807000,"results":"27","hashOfConfig":"26"},{"size":401,"mtime":1620505318077,"results":"28","hashOfConfig":"26"},{"size":1298,"mtime":1611985807000,"results":"29","hashOfConfig":"26"},{"size":795,"mtime":1611985807000,"results":"30","hashOfConfig":"26"},{"size":1822,"mtime":1620554308787,"results":"31","hashOfConfig":"26"},{"size":784,"mtime":1620498023178,"results":"32","hashOfConfig":"26"},{"size":774,"mtime":1611985807000,"results":"33","hashOfConfig":"26"},{"size":407,"mtime":1611985807000,"results":"34","hashOfConfig":"26"},{"size":228,"mtime":1611985807000,"results":"35","hashOfConfig":"26"},{"size":2279,"mtime":1620425681629,"results":"36","hashOfConfig":"26"},{"size":3142,"mtime":1611985807000,"results":"37","hashOfConfig":"26"},{"size":146,"mtime":1611985807000,"results":"38","hashOfConfig":"26"},{"size":1538,"mtime":1611985807000,"results":"39","hashOfConfig":"26"},{"size":1549,"mtime":1611985807000,"results":"40","hashOfConfig":"26"},{"size":995,"mtime":1611985807000,"results":"41","hashOfConfig":"26"},{"size":801,"mtime":1611985807000,"results":"42","hashOfConfig":"26"},{"size":491,"mtime":1611985807000,"results":"43","hashOfConfig":"26"},{"size":759,"mtime":1611985807000,"results":"44","hashOfConfig":"26"},{"size":752,"mtime":1611985807000,"results":"45","hashOfConfig":"26"},{"size":1355,"mtime":1611985807000,"results":"46","hashOfConfig":"26"},{"size":6111,"mtime":1611985807000,"results":"47","hashOfConfig":"26"},{"size":1372,"mtime":1611985807000,"results":"48","hashOfConfig":"26"},{"size":1080,"mtime":1620462451138,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"qj8old",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"D:\\Загрузки\\online-store-full-course-master\\client\\src\\index.js",[],["108","109"],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\App.js",["110"],"import React, {useContext, useEffect, useState} from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport AppRouter from \"./components/AppRouter\";\nimport NavBar from \"./components/NavBar\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"./index\";\nimport {check} from \"./http/userAPI\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst App = observer(() => {\n    const {user} = useContext(Context)\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        check().then(data => {\n            user.setUser(true)\n            user.setIsAuth(true)\n        }).finally(() => setLoading(false))\n    }, [])\n\n    if (loading) {\n        return <Spinner animation={\"grow\"}/>\n    }\n\n    return (\n        <BrowserRouter>\n            <NavBar />\n            <AppRouter />\n        </BrowserRouter>\n    );\n});\n\nexport default App;\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\store\\UserStore.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\store\\DeviceStore.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\AppRouter.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\NavBar.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\http\\userAPI.js",["111"],"import {$authHost, $host} from \"./index\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const registration = async (email, password) => {\n    let role = \"USER\"\n    if (email == \"adminadmin@admin.com\") {\n        role = \"ADMIN\";\n      } \n    const {data} = await $host.post('api/user/registration', {email, password, role})\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\n\nexport const login = async (email, password) => {\n    const {data} = await $host.post('api/user/login', {email, password})\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\n\nexport const check = async () => {\n    const {data} = await $authHost.get('api/user/auth' )\n    localStorage.setItem('token', data.token)\n    return jwt_decode(data.token)\n}\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\routes.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\http\\index.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\utils\\consts.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\DevicePage.js",["112"],"import React, {useEffect, useState} from 'react';\nimport {Button, Card, Col, Container, Image, Row} from \"react-bootstrap\";\nimport bigStar from '../assets/bigStar.png'\nimport {useParams} from 'react-router-dom'\nimport {fetchOneDevice} from \"../http/deviceAPI\";\n\nimport './DevicePage.css'\n\nconst DevicePage = () => {\n    const [device, setDevice] = useState({info: []})\n    const {id} = useParams()\n    useEffect(() => {\n        fetchOneDevice(id).then(data => setDevice(data))\n    }, [])\n\n    return (\n        <Container className=\"mt-3\">\n            <Row>\n                <Col md={4}>\n                    <Image width={300} height={300} src={process.env.REACT_APP_API_URL + device.img}/>\n                </Col>\n                <Col md={4}>\n                    <Row className=\"d-flex flex-column align-items-center\">\n                        <h2>{device.name}</h2>\n                        <div\n                            className=\"d-flex align-items-center justify-content-center\"\n                            style={{background: `url(${bigStar}) no-repeat center center`, width:240, height: 240, backgroundSize: 'cover', fontSize:64}}\n                        >\n                            {device.rating}\n                        </div>\n                    </Row>\n                </Col>\n                <Col md={4}>\n                    <Card\n                        className=\"d-flex flex-column align-items-center justify-content-around\"\n                        style={{width: 300, height: 300, fontSize: 32, border: '5px solid lightgray'}}\n                    >\n                        <h3>От: {device.price} руб.</h3>\n                        <Button variant={\"outline-dark\"}>Добавить в корзину</Button>\n                    </Card>\n                </Col>\n            </Row>\n            <Row className=\"d-flex flex-column m-3\">\n                <div className=\"harakter\">Характеристики</div>\n                {device.info.map((info, index) =>\n                    <Row key={info.id} style={{background: index % 2 === 0 ? 'lightgray' : 'transparent', padding: 10}}>\n                        {info.title}: {info.description}\n                    </Row>\n                )}\n            </Row>\n        </Container>\n    );\n};\n\nexport default DevicePage;\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Auth.js",["113"],"import React, {useContext, useState} from 'react';\nimport {Container, Form} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport {NavLink, useLocation, useHistory} from \"react-router-dom\";\nimport {LOGIN_ROUTE, REGISTRATION_ROUTE, SHOP_ROUTE} from \"../utils/consts\";\nimport {login, registration} from \"../http/userAPI\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\n\nconst Auth = observer(() => {\n    const {user} = useContext(Context)\n    const location = useLocation()\n    const history = useHistory()\n    const isLogin = location.pathname === LOGIN_ROUTE\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const click = async () => {\n        try {\n            let data;\n            if (isLogin) {\n                data = await login(email, password);\n            } else {\n                data = await registration(email, password);\n            }\n            user.setUser(user)\n            user.setIsAuth(true)\n            history.push(SHOP_ROUTE)\n        } catch (e) {\n            alert(e.response.data.message)\n        }\n\n    }\n\n    return (\n        <Container\n            className=\"d-flex justify-content-center align-items-center\"\n            style={{height: window.innerHeight - 54}}\n        >\n            <Card style={{width: 600}} className=\"p-5\">\n                <h2 className=\"m-auto\">{isLogin ? 'Авторизация' : \"Регистрация\"}</h2>\n                <Form className=\"d-flex flex-column\">\n                    <Form.Control\n                        className=\"mt-3\"\n                        placeholder=\"Введите ваш email...\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)}\n                    />\n                    <Form.Control\n                        className=\"mt-3\"\n                        placeholder=\"Введите ваш пароль...\"\n                        value={password}\n                        onChange={e => setPassword(e.target.value)}\n                        type=\"password\"\n                    />\n                    <Row className=\"d-flex justify-content-between mt-3 pl-3 pr-3\">\n                        {isLogin ?\n                            <div>\n                                Нет аккаунта? <NavLink to={REGISTRATION_ROUTE}>Зарегистрируйся!</NavLink>\n                            </div>\n                            :\n                            <div>\n                                Есть аккаунт? <NavLink to={LOGIN_ROUTE}>Войдите!</NavLink>\n                            </div>\n                        }\n                        <Button\n                            variant={\"outline-success\"}\n                            onClick={click}\n                        >\n                            {isLogin ? 'Войти' : 'Регистрация'}\n                        </Button>\n                    </Row>\n\n                </Form>\n            </Card>\n        </Container>\n    );\n});\n\nexport default Auth;\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Basket.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Shop.js",["114","115"],"import React, {useContext, useEffect} from 'react';\nimport {Container} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport TypeBar from \"../components/TypeBar\";\nimport BrandBar from \"../components/BrandBar\";\nimport DeviceList from \"../components/DeviceList\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport {fetchBrands, fetchDevices, fetchTypes} from \"../http/deviceAPI\";\nimport Pages from \"../components/Pages\";\n\nconst Shop = observer(() => {\n    const {device} = useContext(Context)\n\n    useEffect(() => {\n        fetchTypes().then(data => device.setTypes(data))\n        fetchBrands().then(data => device.setBrands(data))\n        fetchDevices(null, null, 1, 2).then(data => {\n            device.setDevices(data.rows)\n            device.setTotalCount(data.count)\n        })\n    }, [])\n\n    useEffect(() => {\n        fetchDevices(device.selectedType.id, device.selectedBrand.id, device.page, 2).then(data => {\n            device.setDevices(data.rows)\n            device.setTotalCount(data.count)\n        })\n    }, [device.page, device.selectedType, device.selectedBrand,])\n\n    return (\n        <Container>\n            <Row className=\"mt-2\">\n                <Col md={3}>\n                    <TypeBar/>\n                </Col>\n                <Col md={9}>\n                    <BrandBar/>\n                    <DeviceList/>\n                    <Pages/>\n                </Col>\n            </Row>\n        </Container>\n    );\n});\n\nexport default Shop;\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\pages\\Admin.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\http\\deviceAPI.js",["116"],"import {$authHost, $host} from \"./index\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const createType = async (type) => {\n    const {data} = await $authHost.post('api/type', type)\n    return data\n}\n\nexport const fetchTypes = async () => {\n    const {data} = await $host.get('api/type')\n    return data\n}\n\nexport const createBrand = async (brand) => {\n    const {data} = await $authHost.post('api/brand', brand)\n    return data\n}\n\nexport const fetchBrands = async () => {\n    const {data} = await $host.get('api/brand', )\n    return data\n}\n\nexport const createDevice = async (device) => {\n    const {data} = await $authHost.post('api/device', device)\n    return data\n}\n\nexport const fetchDevices = async (typeId, brandId, page, limit= 5) => {\n    const {data} = await $host.get('api/device', {params: {\n            typeId, brandId, page, limit\n        }})\n    return data\n}\n\nexport const fetchOneDevice = async (id) => {\n    const {data} = await $host.get('api/device/' + id)\n    return data\n}\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\Pages.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\DeviceList.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\BrandBar.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\TypeBar.js",["117"],"import React, {useContext} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport Col from \"react-bootstrap/Col\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nconst TypeBar = observer(() => {\n    const {device} = useContext(Context)\n    return (\n        <ListGroup>\n            {device.types.map(type =>\n                <ListGroup.Item\n                    style={{cursor: 'pointer'}}\n                    active={type.id === device.selectedType.id}\n                    onClick={() => device.setSelectedType(type)}\n                    key={type.id}\n                >\n                    {type.name}\n                </ListGroup.Item>\n            )}\n        </ListGroup>\n    );\n});\n\nexport default TypeBar;\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\modals\\CreateType.js",[],"D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\modals\\CreateDevice.js",["118","119"],"import React, {useContext, useEffect, useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Button, Dropdown, Form, Row, Col} from \"react-bootstrap\";\nimport {Context} from \"../../index\";\nimport {createDevice, fetchBrands, fetchDevices, fetchTypes} from \"../../http/deviceAPI\";\nimport {observer} from \"mobx-react-lite\";\n\nconst CreateDevice = observer(({show, onHide}) => {\n    const {device} = useContext(Context)\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [file, setFile] = useState(null)\n    const [info, setInfo] = useState([])\n\n    useEffect(() => {\n        fetchTypes().then(data => device.setTypes(data))\n        fetchBrands().then(data => device.setBrands(data))\n    }, [])\n\n    const addInfo = () => {\n        setInfo([...info, {title: '', description: '', number: Date.now()}])\n    }\n    const removeInfo = (number) => {\n        setInfo(info.filter(i => i.number !== number))\n    }\n    const changeInfo = (key, value, number) => {\n        setInfo(info.map(i => i.number === number ? {...i, [key]: value} : i))\n    }\n\n    const selectFile = e => {\n        setFile(e.target.files[0])\n    }\n\n    const addDevice = () => {\n        const formData = new FormData()\n        formData.append('name', name)\n        formData.append('price', `${price}`)\n        formData.append('img', file)\n        formData.append('brandId', device.selectedBrand.id)\n        formData.append('typeId', device.selectedType.id)\n        formData.append('info', JSON.stringify(info))\n        createDevice(formData).then(data => onHide())\n    }\n\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Добавить устройство\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Dropdown className=\"mt-2 mb-2\">\n                        <Dropdown.Toggle>{device.selectedType.name || \"Выберите тип\"}</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {device.types.map(type =>\n                                <Dropdown.Item\n                                    onClick={() => device.setSelectedType(type)}\n                                    key={type.id}\n                                >\n                                    {type.name}\n                                </Dropdown.Item>\n                            )}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <Dropdown className=\"mt-2 mb-2\">\n                        <Dropdown.Toggle>{device.selectedBrand.name || \"Выберите тип\"}</Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            {device.brands.map(brand =>\n                                <Dropdown.Item\n                                    onClick={() => device.setSelectedBrand(brand)}\n                                    key={brand.id}\n                                >\n                                    {brand.name}\n                                </Dropdown.Item>\n                            )}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <Form.Control\n                        value={name}\n                        onChange={e => setName(e.target.value)}\n                        className=\"mt-3\"\n                        placeholder=\"Введите название устройства\"\n                    />\n                    <Form.Control\n                        value={price}\n                        onChange={e => setPrice(Number(e.target.value))}\n                        className=\"mt-3\"\n                        placeholder=\"Введите стоимость устройства\"\n                        type=\"number\"\n                    />\n                    <Form.Control\n                        className=\"mt-3\"\n                        type=\"file\"\n                        onChange={selectFile}\n                    />\n                    <hr/>\n                    <Button\n                        variant={\"outline-dark\"}\n                        onClick={addInfo}\n                    >\n                        Добавить новое свойство\n                    </Button>\n                    {info.map(i =>\n                        <Row className=\"mt-4\" key={i.number}>\n                            <Col md={4}>\n                                <Form.Control\n                                    value={i.title}\n                                    onChange={(e) => changeInfo('title', e.target.value, i.number)}\n                                    placeholder=\"Введите название свойства\"\n                                />\n                            </Col>\n                            <Col md={4}>\n                                <Form.Control\n                                    value={i.description}\n                                    onChange={(e) => changeInfo('description', e.target.value, i.number)}\n                                    placeholder=\"Введите описание свойства\"\n                                />\n                            </Col>\n                            <Col md={4}>\n                                <Button\n                                    onClick={() => removeInfo(i.number)}\n                                    variant={\"outline-danger\"}\n                                >\n                                    Удалить\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button variant=\"outline-success\" onClick={addDevice}>Добавить</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default CreateDevice;\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\modals\\CreateBrand.js",["120"],"import React, {useState} from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {createBrand, createType} from \"../../http/deviceAPI\";\n\nconst CreateBrand = ({show, onHide}) => {\n    const [value, setValue] = useState('')\n\n    const addBrand = () => {\n        createBrand({name: value}).then(data => {\n            setValue('')\n            onHide()\n        })\n    }\n    return (\n        <Modal\n            show={show}\n            onHide={onHide}\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Добавить тип\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Control\n                        value={value}\n                        onChange={e => setValue(e.target.value)}\n                        placeholder={\"Введите название типа\"}\n                    />\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"outline-danger\" onClick={onHide}>Закрыть</Button>\n                <Button variant=\"outline-success\" onClick={addBrand}>Добавить</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CreateBrand;\n","D:\\Загрузки\\online-store-full-course-master\\client\\src\\components\\DeviceItem.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":19,"column":8,"nodeType":"127","endLine":19,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":6,"column":15,"nodeType":"131","messageId":"132","endLine":6,"endColumn":17},{"ruleId":"125","severity":1,"message":"133","line":14,"column":8,"nodeType":"127","endLine":14,"endColumn":10,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":26,"column":17,"nodeType":"137","messageId":"138","endLine":26,"endColumn":21},{"ruleId":"125","severity":1,"message":"139","line":23,"column":8,"nodeType":"127","endLine":23,"endColumn":10,"suggestions":"140"},{"ruleId":"125","severity":1,"message":"139","line":30,"column":8,"nodeType":"127","endLine":30,"endColumn":65,"suggestions":"141"},{"ruleId":"135","severity":1,"message":"142","line":2,"column":8,"nodeType":"137","messageId":"138","endLine":2,"endColumn":18},{"ruleId":"135","severity":1,"message":"143","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":11},{"ruleId":"135","severity":1,"message":"144","line":5,"column":36,"nodeType":"137","messageId":"138","endLine":5,"endColumn":48},{"ruleId":"125","severity":1,"message":"139","line":18,"column":8,"nodeType":"127","endLine":18,"endColumn":10,"suggestions":"145"},{"ruleId":"135","severity":1,"message":"146","line":4,"column":22,"nodeType":"137","messageId":"138","endLine":4,"endColumn":32},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["149"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["150"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'device'. Either include it or remove the dependency array.",["151"],["152"],"'jwt_decode' is defined but never used.","'Col' is defined but never used.","'fetchDevices' is defined but never used.",["153"],"'createType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"158","fix":"162"},"Update the dependencies array to be: [user]",{"range":"163","text":"164"},"Update the dependencies array to be: [id]",{"range":"165","text":"166"},"Update the dependencies array to be: [device]",{"range":"167","text":"168"},"Update the dependencies array to be: [device.page, device.selectedType, device.selectedBrand, device]",{"range":"169","text":"170"},{"range":"171","text":"168"},[641,643],"[user]",[484,486],"[id]",[875,877],"[device]",[1107,1164],"[device.page, device.selectedType, device.selectedBrand, device]",[747,749]]